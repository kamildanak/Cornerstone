def mcVersion         = "1.12" // Always matches the Minecraft version the mod is for.
def majorModVersion   = "0" // Removing items/blocks, changing mechanics, updating to a new Minecraft version.
def majorApiModVersion     = "0" // Changing the order of enums, return types of methods, removing methods
def minorModVersion   = "1" // Adding items, blocks, tile entities, Adding new mechanics., Deprecating public methods.
def patchVersion = "0" //Bugfixes.
def suffix = "" // "-final" - last release for that Minecraft, "-betaX" - Pre-releases, "-rcX"-Release Candidates
version = mcVersion+"-"+majorModVersion+"."+majorApiModVersion+"."+minorModVersion+"."+patchVersion+suffix

def modID = "cornerstone"
def modName = "Cornerstone"

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

group = "com.kamildanak.minecraft.cornerstone" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modID

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

minecraft {
    version = "1.12-14.21.1.2387"
    mappings = "snapshot_20170624"

    if (file("../run").exists()) {
        runDir = "../run"
    } else {
        runDir = "run"
    }
    replace "{@modVersion}": project.version
    replace "{@mcVersion}": mcVersion
    replace "{@modID}": modID
    replace "{@modName}": modName
}

repositories {
    maven {
        url "../local-repo"
    }
}

dependencies {
    //compile project(':Foamflower')
    compile name: "foamflower", group: "com.kamildanak.minecraft.foamflower", version: "1.12-0.0.1.0", classifier: "deobf"
}
processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version': project.version, 'mcversion': project.minecraft.version, 'modID': modID, 'modName': modName
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}
tasks.build.dependsOn('sourceJar', 'deobfJar')

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/"+projectDir+"/../local-repo/")
        }
    }
}